<div class="container">
  <h1 class="text-center">S'Cape: Maître du jeu</h1>


  <div class="row">
    <div class="col-sm-6">
      <div class="form-group">
        <h4 class="control-label">Envoyer un message</h4>
        <textarea class="form-control" id="messageContent" rows="3"></textarea>
      </div>
      <p>
        <button class="btn btn-default" id="sendButton">Envoyer</button>
      </p>

    </div>
    <div class="col-sm-6">
      <h4>Compte à rebours</h4>
      <h3 id="timerDisplay">01:00:00</h3>
      <button class="btn btn-default" id="timerButton">Démarrer le compte à rebours</button>
    </div>
    <div class="col-sm-6">
      <h4>Metrre le compte à rebours à :</h4>
      <form class="form-inline" id="setTimer">
        <div class="form-group">
          <input class="form-control" type="number" min="0" max="60" name="hours" id="setTimerHours" value="1">
        </div>
        <div class="form-group">
          <input class="form-control" type="number" min="0" max="60" name="minutes" id="setTimerMinutes" value="0">
        </div>
        <div class="form-group">
          <input class="form-control" type="number" min="0" max="60" name="seconds" id="setTimerSeconds" value="0">
        </div>
        <button class="btn btn-danger" type="submit">Réinitialiser</button>
      </form>
    </div>
  </div>

  <div class="row">
    <div class="col-sm-6">
      <h4>Historique des messages</h4>
      <ul id="messages-history" class="list-unstyled list-scrollable">
        {{#each messages}}
          <li><b>{{#formatTime}}{{time}}{{/formatTime}}</b> : {{message}}</li>
        {{/each}}
      </ul>
    </div>
    <div class="col-sm-6">
      <h4>Liste des photos disponibles</h4>
      <div class="list-scrollable">
        {{#each imagesList}}
          <div class="media">
            <div class="media-left image-container">
              <a href="#">
                <img class="media-object game-image" src="{{url}}" alt="{{display}}">
              </a>
            </div>
            <div class="media-body">
              {{display}}<button class="btn btn-link btn-image pull-right" data-image="{{encoded}}">Envoyer</button>
            </div>
          </div>
        {{/each}}
      </div>
    </div>
  </div>

  <div id="errorHandler"><div id="errorMessage"></div></div>
</div>

<script>
  const socket = io();
let isTimerRunning = false;

const errorHandler = document.getElementById('errorHandler');
const errorMessage = document.getElementById('errorMessage');
const messageContent = document.getElementById('messageContent');
const resetTimerButton = document.getElementById('resetTimerButton');
const sendButton = document.getElementById('sendButton');
const timerButton = document.getElementById('timerButton');
const timerDisplay = document.getElementById('timerDisplay');
const imageButtons = document.getElementsByClassName('btn-image') || [];
const setTimer = document.getElementById('setTimer');

/**
 * Helpers
 */
function displayError(message) {
  errorMessage.innerHTML = `Erreur : ${message}`;
  errorHandler.classList.add('active');
  setTimeout(function() {
    errorHandler.classList.remove('active');
  }, 5000);
}

/**
 * Listeners
 */
socket.on('messages updated', function() {
  location.reload();
});

socket.on('message error', function(error) {
  displayError(error);
});

socket.on('app timer updated', function(remainingTime) {
  let sec = remainingTime % 60;
  sec = sec < 10 ? `0${sec}` : sec;
  let min = Math.floor((remainingTime / 60) % 60);
  min = min < 10 ? `0${min}` : min;
  let hours = Math.floor(remainingTime / 3600);
  hours = hours < 10 ? `0${hours}` : hours;
  timerDisplay.innerHTML = `${hours}:${min}:${sec}`;
});

/**
 * Emitters
 */
function sendMessage() {
  socket.emit('send message', messageContent.value, function(error) {
    if (error) {
      displayError(error);
    } else {
      messageContent.value = '';
    }
  });
}

function toggleTimer() {
  socket.emit('toggle timer', function(error) {
    if (error) {
      displayError(error);
      return;
    }
  });
  isTimerRunning = !isTimerRunning;
  timerButton.innerHTML = isTimerRunning
    ? 'Arrêter le compte à rebours'
    : 'Démarrer le compte à rebours';
}

function sendImage(imageName) {
  if (typeof imageName !== 'string') {
    displayError('Nom d\'image invalide');
    return;
  }
  socket.emit('send image', imageName);
}

/**
 * Events handlers
 */
sendButton.addEventListener('click', sendMessage);

messageContent.addEventListener('keyup', function(evt) {
  if (evt.ctrlKey && evt.keyCode === 13) {
    sendMessage();
  }
});

timerButton.addEventListener('click', toggleTimer);

if (imageButtons.length > 0) {
  for (let i = 0; i < imageButtons.length; i += 1) {
    imageButtons[i].addEventListener('click', function(evt) {
      sendImage(evt.target.getAttribute('data-image'));
    });
  }
}

setTimer.addEventListener('submit', function(evt) {
  evt.preventDefault();
  evt.stopPropagation();
  let hours = parseInt(document.getElementById('setTimerHours').value, 10)
  hours = isNaN(hours) ? 0 : hours;
  let minutes = parseInt(document.getElementById('setTimerMinutes').value, 10)
  minutes = isNaN(minutes) ? 0 : minutes
  let seconds = parseInt(document.getElementById('setTimerSeconds').value, 10)
  seconds = isNaN(seconds) ? 0 : seconds;

  socket.emit('reset timer', hours * 3600 + minutes * 60 + seconds);
  isTimerRunning = false;
  timerButton.innerHTML = 'Démarrer le compte à rebours';
})

messageContent.focus();
</script>
